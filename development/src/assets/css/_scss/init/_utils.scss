@charset "utf-8";

@function getPC_vw($size, $viewport:1360){
  $rate: 100 / $viewport;
  @return $rate * $size * 1vw;
}

@mixin fzPC_vw($font_size:10) {
  font-size: $font_size * 1px;
  font-size: getPC_vw($font_size);
}

// Round (四捨五入)
@function math-round ($number, $digits: 0) {
  @return to-fixed($number, $digits, 'round');
}

// Ceil (切り上げ)
@function math-ceil ($number, $digits: 0) {
  @return to-fixed($number, $digits, 'ceil');
}

// Floor (切り捨て)
@function math-floor ($number, $digits: 0) {
  @return to-fixed($number, $digits, 'floor');
}

@function to-fixed ($number, $digits: 0, $round: 'round') {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $round == 'round' {
    @return round($number * $n) / $n;
  } @else if $round == 'ceil' {
    @return ceil($number * $n) / $n;
  } @else if $round == 'floor' {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $round } is undefined keyword.';
    @return $number;
  }
}

@function vw ($number) {
  @return math-floor( $number * 0.1334 , 1) + vw;
}

//vw 算出関数
// Max breakpoint
$max-breakpoint: 750;
$max-breakpointH: 600;
// Function
@function get-vw($target) {
  // 1 vw is equal to 1% of the viewport width
  $vw-context: ($max-breakpoint * .01) * 1px; // 1% viewport width
  @return math-ceil(($target/$vw-context) * 1vw, 2);
}
@function get-vh($target) {
  // 1 vw is equal to 1% of the viewport width
  $vw-context: ($max-breakpointH * .01) * 1px; // 1% viewport width
  @return math-ceil(($target/$vw-context) * 1vh, 2);
}

//------------------//
//   media queris   //
//------------------//

@mixin sizeS {
  @media screen and (max-width: 680px) {
    @content;
  }
}

@mixin sizeM {
  @media screen and (min-width: 681px) and (max-width: 980px) {
    @content;
  }
}

@mixin sizeSM {
  @media screen and (min-width: 681px) and (max-width: 840px) {
    @content;
  }
}

@mixin forLessSizeM {
  @media screen and (max-width: 980px) {
    @content;
  }
}

@mixin sp {
  @media screen and (max-width: 768px) {
    @content;
  }
}

@mixin pc {
  @media screen and (min-width: 769px) {
    @content;
  }
}
@mixin pcw {
  @media screen and (min-width: 1640px) {
    @content;
  }
}


//------------//
//   easing   //
//------------//

$linear: cubic-bezier(0.250, 0.250, 0.750, 0.750);
$ease: cubic-bezier(0.250, 0.100, 0.250, 1.000);
$easeIn: cubic-bezier(0.420, 0.000, 1.000, 1.000);
$easeOut: cubic-bezier(0.000, 0.000, 0.580, 1.000);
$easeInOut: cubic-bezier(0.420, 0.000, 0.580, 1.000);

$easeInQuad: cubic-bezier(0.550, 0.085, 0.680, 0.530);
$easeInCubic: cubic-bezier(0.550, 0.055, 0.675, 0.190);
$easeInQuart: cubic-bezier(0.895, 0.030, 0.685, 0.220);
$easeInQuint: cubic-bezier(0.755, 0.050, 0.855, 0.060);
$easeInSine: cubic-bezier(0.470, 0.000, 0.745, 0.715);
$easeInExpo: cubic-bezier(0.950, 0.050, 0.795, 0.035);
$easeInCirc: cubic-bezier(0.600, 0.040, 0.980, 0.335);
$easeInBack: cubic-bezier(0.600, -0.280, 0.735, 0.045);

$easeOutQuad: cubic-bezier(0.250, 0.460, 0.450, 0.940);
$easeOutCubic: cubic-bezier(0.215, 0.610, 0.355, 1.000);
$easeOutQuart: cubic-bezier(0.165, 0.840, 0.440, 1.000);
$easeOutQuint: cubic-bezier(0.230, 1.000, 0.320, 1.000);
$easeOutSine: cubic-bezier(0.390, 0.575, 0.565, 1.000);
$easeOutExpo: cubic-bezier(0.190, 1.000, 0.220, 1.000);
$easeOutCirc: cubic-bezier(0.075, 0.820, 0.165, 1.000);
$easeOutBack: cubic-bezier(0.175, 0.885, 0.320, 1.275);

$easeInOutQuad: cubic-bezier(0.455, 0.030, 0.515, 0.955);
$easeInOutCubic: cubic-bezier(0.645, 0.045, 0.355, 1.000);
$easeInOutQuart: cubic-bezier(0.770, 0.000, 0.175, 1.000);
$easeInOutQuint: cubic-bezier(0.860, 0.000, 0.070, 1.000);
$easeInOutSine: cubic-bezier(0.445, 0.050, 0.550, 0.950);
$easeInOutExpo: cubic-bezier(0.190, 1.000, 0.220, 1.000);
$easeInOutCirc: cubic-bezier(0.785, 0.135, 0.150, 0.860);
$easeInOutBack: cubic-bezier(0.680, -0.550, 0.265, 1.550);


//-------------//
//   opacity   //
//-------------//

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacityIE: $opacity * 100;
  filter: alpha(opacity=$opacityIE);
}

@mixin autoAlpha($value) {
  @if $value > 0 {
    visibility: visible;
  } @else {
    visibility: hidden;
  }
  opacity: $value;
}


//------------//
//   button   //
//------------//

@mixin btnBasic($width, $height) {
  width: $width;
  height: $height;
  a {
    display: block;
    width: 100%;
    height: 100%;
  }
}

// with spritesmith
@mixin btnSprite($sprite) {
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  a {
    @include sprite($sprite);
    @include hidetxt;
    display: block;
    width: 100%;
    height: 100%;
  }
}

// with spritesmith
@mixin btnSprite2x($sprite) {
  @include sprite-width-2x($sprite);
  @include sprite-height-2x($sprite);
  a {
    @include sprite2x($sprite);
    @include hidetxt;
    display: block;
    width: 100%;
    height: 100%;
  }
}

// with spritesmith
@mixin btnLabelSprite($width, $height, $sprite) {
  width: $width;
  height: $height;
  position: relative;
  a {
    @include absoluteTopLeft;
    display: block;
    width: 100%;
    height: 100%;
    span {
      @include sprite($sprite);
      @include hidetxt;
      @include absoluteCenterVH;
    }
  }
}

// with spritesmith
@mixin btnLabelSprite2x($width, $height, $sprite) {
  width: $width;
  height: $height;
  position: relative;
  a {
    @include absoluteTopLeft;
    display: block;
    width: 100%;
    height: 100%;
    span {
      @include sprite2x($sprite);
      @include hidetxt;
      @include absoluteCenterVH;
    }
  }
}

//--------------//
//   position   //
//--------------//

@mixin negativeMarginCenterVH($marginTop, $marginLeft) {
  position: absolute;
  margin: $marginTop 0 0 $marginLeft;
  left: 50%;
  top: 50%;
}

@mixin negativeMarginCenterV($marginTop) {
  position: absolute;
  margin-top: $marginTop;
  top: 50%;
}

@mixin negativeMarginCenterH($marginLeft) {
  position: absolute;
  margin-left: $marginLeft;
  left: 50%;
}

@mixin absoluteCenterVH {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
}

@mixin absoluteCenterV {
  position: absolute;
  top: 0;
  bottom: 0;
  margin-top: auto;
  margin-bottom: auto;
}

@mixin absoluteCenterH {
  position: absolute;
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
}

@mixin absoluteTopLeft {
  position: absolute;
  left: 0;
  top: 0;
}

@mixin absoluteTopRight {
  position: absolute;
  right: 0;
  top: 0;
}

@mixin absoluteBottomLeft {
  position: absolute;
  left: 0;
  bottom: 0;
}

@mixin absoluteBottomRight {
  position: absolute;
  right: 0;
  bottom: 0;
}

@mixin absoluteTopCenter {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
}

@mixin absoluteBottomCenter {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
}

@mixin absoluteCenterLeft {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  margin-top: auto;
  margin-bottom: auto;
}

@mixin absoluteCenterRight {
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  margin-top: auto;
  margin-bottom: auto;
}

@mixin sprite-width-2x($sprite) {
  width: nth($sprite, 5) / 2;
}

@mixin sprite-height-2x($sprite) {
  height: nth($sprite, 6) / 2;
}

@mixin sprite-position-2x($sprite) {
  $sprite-offset-x: nth($sprite, 3)/2;
  $sprite-offset-y: nth($sprite, 4)/2;
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image-2x($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite-size-2x($sprite) {
  background-size: nth($sprite, 7)/2 nth($sprite, 8)/2;
}

@mixin sprite2x($sprite) {
  @include sprite-image-2x($sprite);
  @include sprite-position-2x($sprite);
  @include sprite-width-2x($sprite);
  @include sprite-height-2x($sprite);
  @include sprite-size-2x($sprite);
}

//------------//
//   others   //
//------------//

@mixin hidetxt {
  text-indent: 120%;
  white-space: nowrap;
  overflow: hidden;
  line-height: 0.1;
}

@mixin clearfix {
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

@function hpx ($number) {
  @return ( $number / 2) + px;
}